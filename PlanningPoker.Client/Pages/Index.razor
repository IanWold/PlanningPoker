@page "/"
@inject SessionState _state

<PageTitle>Free Planning Poker</PageTitle>

<div class="container p-0" style="max-width: 600px;">
    <div class="logo-hero">
        <img src="cowboy1.svg">
    </div>

    <ToggleColorModeComponent />
    
    <h1 class="font-cursive">Free</h1>
    <h1 class="font-title">Planning Poker</h1>

    <div class="mt-5 mb-5 text-center">
        Always Free ♣ Unlimited Sessions ♠ Unlimited Participants
    </div>

    <div class="card shadow border-0">
        <div class="card-body">
            <form @onsubmit=OnStartPlanningClicked>
                <div class="d-flex gap-2">
                    <div class="flex-fill">
                        <input type="text" class="form-control" placeholder="Session Title" required pattern="(.|\s)*\S(.|\s)*" disabled="@(IsLoading)" @bind-value=Title>
                    </div>
                    <div class="flex-fill">
                        <input type="text" class="form-control" placeholder="Your Name" required pattern="(.|\s)*\S(.|\s)*" disabled="@(IsLoading)" @bind-value=Name>
                    </div>
                </div>

                <div class="form-control px-2 d-flex gap-2 mt-2">
                    <input type="radio" class="btn-check" name="options-outlined" id="check-fibonacci" autocomplete="off" disabled="@(IsLoading)" checked @onchange="@(() => PointValueTemplate = "fibonacci")">
                    <label class="btn btn-outline-secondary border-0" style="flex-basis: 0; flex-grow: 1;" for="check-fibonacci">Fibonacci</label>
                
                    <input type="radio" class="btn-check" name="options-outlined" id="check-powers" autocomplete="off" disabled="@(IsLoading)"  @onchange="@(() => PointValueTemplate = "powers")">
                    <label class="btn btn-outline-secondary border-0" style="flex-basis: 0; flex-grow: 1;" for="check-powers">Powers of 2</label>
                    
                    <input type="radio" class="btn-check" name="options-outlined" id="check-tshirt" autocomplete="off" disabled="@(IsLoading)"  @onchange="@(() => PointValueTemplate = "tshirt")">
                    <label class="btn btn-outline-secondary border-0" style="flex-basis: 0; flex-grow: 1;" for="check-tshirt">T-Shirt Sizes</label>
                    
                    <input type="radio" class="btn-check" name="options-outlined" id="check-west" autocomplete="off" disabled="@(IsLoading)"  @onchange="@(() => PointValueTemplate = "west")">
                    <label class="btn btn-outline-secondary border-0" style="flex-basis: 0; flex-grow: 1;" for="check-west">Wild West</label>
                </div>

                <button class="btn btn-primary mt-2 w-100" type="submit" disabled="@(IsLoading)">Start Planning</button>
            </form>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger mb-0 mt-3">
                    <ion-icon name="alert-circle-sharp" style="margin-bottom: -8px; font-size: 20pt;"></ion-icon> @ErrorMessage
                </div>
            }
        </div>
    </div>

    <b class="d-block mt-5 mb-3">♠ What is this?</b>

    <p class="text-justify">
        This is Free Planning Poker, a free tool for software teams to do "planning poker" exercises to estimate the difficulty and length of development tasks. You can probably use it for other purposes if you need, too. It's always going to be free, without limits.
    </p>

    <b class="d-block mt-5 mb-3">♥ Why does Free Planning Poker exist?</b>

    <p class="text-justify">
        I got fed up with tools being advertised as "free" but then being "freemium". Other tools limit the number of people you can have in a session, or they limit how many people can join, or they limit how much fun you can have. This one is unlimited across the board.
    </p>

    <b class="d-block mt-5 mb-3">♣ Do you track me or keep my data?</b>

    <p class="text-justify">
        No and no! The state of your planning session is saved on my server only so long as your session is open and it's all deleted when the last participant leaves. Any data that goes to my server is end-to-end encrypted, so I couldn't read it even if I wanted.
    </p>
    
    <p class="text-justify">
        If you want to verify that yourself or contribute in any way, <a href="https://github.com/IanWold/PlanningPoker">this site is open source</a> which allows you to read, modify, or deploy your own instance of this app. You can also <a href="https://ian.wold.guru/connect.html">contact me directly</a> if you need to for any reason.
    </p>

    <b class="d-block mt-5 mb-3">♦ Who are you?</b>

    <p class="text-justify">
        My name is <a href="https://ian.wold.guru">Ian Wold</a>, I'm a software engineer in Minneapolis. Occasionally I build things and put them online. If you find Free Planning Poker useful, I'd be greatful if you might <a href="https://ko-fi.com/ianwold">buy me a coffee</a>, I spend all proceeds on server costs and not coffee.
    </p>
</div>

@code {
    string Title { get; set; } = string.Empty;

    string Name { get; set; } = string.Empty;

    string? ErrorMessage { get; set; }

    bool IsLoading { get; set; }

    string PointValueTemplate { get; set; } = "fibonacci";

    async Task OnStartPlanningClicked()
    {
        if (!string.IsNullOrWhiteSpace(Title) && !string.IsNullOrWhiteSpace(Name))
        {
            IsLoading = true;
            ErrorMessage = null;
            StateHasChanged();

            string[] pointValues = PointValueTemplate switch
            {
                "powers" => [ "1", "2", "4", "8", "16", "32", "∞", "?" ],
                "tshirt" => [ "XS", "S", "M", "L", "XL", "?" ],
                "west" => [ "🤠", "🐎", "🌵", "🦬", "🪕", "🐄", "🔥", "🥩" ],
                _ => [ "½", "1", "2", "3", "5", "8", "∞", "?" ]
            };

            try
            {
                await _state.CreateAsync(Title, Name, pointValues);
            }
            catch
            {
                ErrorMessage = "An error occurred while creating your session. Please try again.";
            }

            IsLoading = false;
            StateHasChanged();
        }
    }
}
