@page "/session/{SessionId:guid}"
@inject SessionState _state
@inject IJSRuntime _jsRuntime

@using System

<PageTitle>@(_state.Session?.Title ?? "Session")</PageTitle>

@if (_state.Session is null)
{
    <span>Loading...</span>
}
else
{
    @if (_state.Self is null && !IsEditingName)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <form class="d-flex gap-2 w-100" @onsubmit=OnJoinClicked>
                    <input type="text" class="form-control" placeholder="Enter your name to join the session" required pattern="(.|\s)*\S(.|\s)*" @bind-value=Name>
                    <button class="btn btn-primary" type="submit">Join</button>
                </form>
            </div> </div> </div> </div>
        </div>
    }

    @if (IsEditingTitle)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <form class="d-flex gap-2 w-100" @onsubmit=OnSaveTitleClicked>
                    <input type="text" class="form-control" placeholder="Enter a title for the session" required pattern="(.|\s)*\S(.|\s)*" @bind-value=Title>
                    <button class="btn border-0 btn-outline-success" type="submit"><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" @onclick=OnCloseEditTitleModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </form>
            </div> </div> </div> </div>
        </div>
    }

    @if (IsEditingName)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <form class="d-flex gap-2 w-100" @onsubmit=OnSaveNameClicked>
                    <input type="text" class="form-control" placeholder="Enter your name" required pattern="(.|\s)*\S(.|\s)*" @bind-value=Name>
                    <button class="btn border-0 btn-outline-success" type="submit"><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" @onclick=OnCloseEditNameModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </form>
            </div> </div> </div> </div>
        </div>
    }

    <ShareNotificationComponent />

    <div class="session" style="@(IsContentBlurred ? "filter: blur(1px)" : "")">
        <div class="card m-3 shadow-sm border-0" style="grid-area: header; width: 600px;">
            <div class="card-body p-2">
                <div class="d-flex gap-2 w-100 justify-content-between">
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon fw-bold" @onclick=OnEditTitleClicked>@_state.Session.Title <ion-icon name="settings-sharp"></ion-icon></button>
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon" @onclick=OnEditNameClicked><ion-icon name="person-sharp"></ion-icon> @_state.Self?.Name</button>
                </div>
            </div>
        </div>
        
        <AddComponent />

        <div style="grid-area: main">
            <div class="circle bg-secondary-subtle" style="--total: @(_state.Session.Participants.Count()); --radius: @(System.Math.Max(_state.Session.Participants.Count() * 25, 125))px;">
                @if (_state.Session.State == State.Hidden)
                {
                    <button class="btn btn-outline-primary border-0" @onclick="@(async () => await _state.UpdateStateAsync(State.Revealed))"><ion-icon name="eye-outline"></ion-icon></button>
                }
                else
                {
                    <button class="btn btn-outline-primary border-0" @onclick="@(async () => await _state.UpdateStateAsync(State.Hidden))"><ion-icon name="sync"></ion-icon></button>
                }

                @for (int i = 0; i < _state.Others.Count(); i++)
                {
                    <div class="stat" style="--i:@(i + 1)">
                        <label>@_state.Others.ElementAt(i).Name</label>

                        <div class="point shadow @(string.IsNullOrWhiteSpace(_state.Others.ElementAt(i).Points) ? "bg-primary-subtle" : "bg-primary") text-white">
                            @if (_state.Session.State != State.Hidden && !string.IsNullOrWhiteSpace(_state.Others.ElementAt(i).Points))
                            {
                                <span>@_state.Others.ElementAt(i).Points</span>
                            }
                        </div>
                    </div>
                }
                
                @if (_state.Self is not null)
                {
                    <div class="stat" style="--i:@(_state.Session.Participants.Count())">
                        <label>@_state.Self.Name</label>

                        <div class="point shadow @(string.IsNullOrWhiteSpace(_state.Self.Points) ? "bg-primary-subtle" : "bg-primary") text-white">
                            @if (_state.Session.State != State.Hidden && !string.IsNullOrWhiteSpace(_state.Self.Points))
                            {
                                <span>@_state.Self.Points</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="card m-3 w-auto shadow-sm border-0" style="grid-area: footer; max-width: 600px;">
            <div class="card-body p-2">
                <div class="d-flex gap-2 justify-content-between">
                    @foreach (var option in _state.Options)
                    {
                        <button class="btn btn-square @(_state.Self?.Points == option ? "btn-primary" : "btn-outline-primary")" @onclick="@(async () => await _state.UpdatePointsAsync(option))">@option</button>
                    }
                </div>
            </div>
        </div>

        <HelpComponent />
    </div>
}

@code {
    [Parameter]
    public Guid SessionId { get; set; }

    string Title { get; set; } = string.Empty;

    string Name { get; set; } = string.Empty;

    bool IsEditingTitle { get; set; }

    bool IsEditingName { get; set; }

    bool IsContentBlurred =>
        _state.Self is null
        || IsEditingTitle
        || IsEditingName;

    protected override async Task OnInitializedAsync()
    {
        _state.OnStateChanged += (o, e) => StateHasChanged();
        await _state.LoadAsync(SessionId);
    }

    void OnEditTitleClicked()
    {
        Title = _state.Session.Title;
        IsEditingTitle = true;
        StateHasChanged();
    }

    void OnEditNameClicked()
    {
        Name = _state.Self!.Name;
        IsEditingName = true;
        StateHasChanged();
    }

    void OnCloseEditTitleModalClicked()
    {
        IsEditingTitle = false;
    }

    void OnCloseEditNameModalClicked()
    {
        IsEditingName = false;
    }

    async Task OnSaveTitleClicked()
    {
        if (!string.IsNullOrWhiteSpace(Title))
        {
            await _state.UpdateTitleAsync(Title);
            IsEditingTitle = false;
            StateHasChanged();
        }
    }

    async Task OnSaveNameClicked()
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            await _state.UpdateNameAsync(Name);
            IsEditingName = false;
            StateHasChanged();
        }
    }

    async Task OnJoinClicked()
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            await _state.JoinAsync(Name);
        }
    }
}
