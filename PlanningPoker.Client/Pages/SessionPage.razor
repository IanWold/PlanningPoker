@page "/session/{SessionId:guid}"
@inject SessionState _state

@using System

<PageTitle>@(_state.Session?.Title ?? "Session")</PageTitle>

@if (_state.Session is null)
{
    <span>Loading...</span>
}
else
{
    @if (_state.Self is null && !IsEditingName)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <div class="d-flex gap-2 w-100">
                    <input type="text" class="form-control" placeholder="Enter your name to join the session" @bind-value=Name>
                    <button class="btn btn-primary" @onclick="@(async () => await _state.JoinAsync(Name))">Join</button>
                </div>
            </div> </div> </div> </div>
        </div>
    }

    @if (IsEditingTitle)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <div class="d-flex gap-2 w-100">
                    <input type="text" class="form-control" placeholder="Enter a title for the session" @bind-value=Title>
                    <button class="btn border-0 btn-outline-success" @onclick=OnSaveTitleClicked><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" @onclick=OnCloseEditTitleModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </div>
            </div> </div> </div> </div>
        </div>
    }

    @if (IsEditingName)
    {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <div class="d-flex gap-2 w-100">
                    <input type="text" class="form-control" placeholder="Enter your name" @bind-value=Name>
                    <button class="btn border-0 btn-outline-success" @onclick=OnSaveNameClicked><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" @onclick=OnCloseEditNameModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </div>
            </div> </div> </div> </div>
        </div>
    }

    @if (_state.ShowShareNotification)
    {
        <div style="position: absolute; left: 142px; top: 0; z-index: 10; display: flex;">
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 474.3779255537628 132.10090279767292" width="474.3779255537628" height="132.10090279767292">
                <!-- svg-source:excalidraw -->
                <defs>
                  <style class="style-fonts">
                    @@font-face {
                      font-family: "Virgil";
                      src: url("https://excalidraw.com/Virgil.woff2");
                    }
                    @@font-face {
                      font-family: "Cascadia";
                      src: url("https://excalidraw.com/Cascadia.woff2");
                    }
                    @@font-face {
                      font-family: "Assistant";
                      src: url("https://excalidraw.com/Assistant-Regular.woff2");
                    }
                  </style>
                  
                </defs>
                <g transform="translate(126.63824049516904 97.10090279767292) rotate(0 168.86984252929688 12.5)">
                    <text x="0" y="17.52" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#1e1e1e" text-anchor="start" style="white-space: pre;" direction="ltr" dominant-baseline="alphabetic">Copy this link to your participants</text>
                </g>
                <g stroke-linecap="round">
                    <g transform="translate(113.63824049516904 110.10090279767292) rotate(0 -50 -49.5)">
                        <path d="M0.27 -1.02 C-16.39 -0.8, -84.95 16.39, -99.28 0.19 C-113.61 -16, -88.24 -81.48, -85.72 -98.19 M-1.05 1.05 C-17.87 0.99, -86.15 15.03, -99.85 -1.83 C-113.54 -18.69, -85.93 -83.82, -83.2 -100.1" stroke="#1e1e1e" stroke-width="2" fill="none"></path>
                    </g>
                    <g transform="translate(113.63824049516904 110.10090279767292) rotate(0 -50 -49.5)">
                        <path d="M-81.6 -75.15 C-83.64 -82.9, -82.19 -94.26, -83.2 -100.1 M-81.6 -75.15 C-82.12 -85.34, -83.18 -94.46, -83.2 -100.1" stroke="#1e1e1e" stroke-width="2" fill="none"></path>
                    </g>
                    <g transform="translate(113.63824049516904 110.10090279767292) rotate(0 -50 -49.5)">
                        <path d="M-98.01 -79.96 C-94.21 -86.02, -86.87 -95.66, -83.2 -100.1 M-98.01 -79.96 C-92.46 -88.23, -87.48 -95.59, -83.2 -100.1" stroke="#1e1e1e" stroke-width="2" fill="none"></path>
                    </g>
                </g>
                <mask></mask>
            </svg>
            <div>
                <button class="btn-close" style="margin-top: 98px;" @onclick=_state.HideShareNotification></button>
            </div>
        </div>
    }

    <div class="session" style="@(IsContentBlurred ? "filter: blur(1px)" : "")">
        <div class="card m-3 shadow-sm border-0" style="grid-area: header; width: 600px;">
            <div class="card-body p-2">
                <div class="d-flex gap-2 w-100 justify-content-between">
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon fw-bold" @onclick=OnEditTitleClicked>@_state.Session.Title <ion-icon name="settings-sharp"></ion-icon></button>
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon" @onclick=OnEditNameClicked><ion-icon name="person-sharp"></ion-icon> @_state.Self?.Name</button>
                </div>
            </div>
        </div>

        <div style="grid-area: main">
            <div class="circle bg-secondary-subtle" style="--total: @(_state.Session.Participants.Count()); --radius: @(System.Math.Max(_state.Session.Participants.Count() * 25, 125))px;">
                @if (_state.Session.State == State.Hidden)
                {
                    <button class="btn btn-outline-primary border-0" @onclick=_state.RevealAsync><ion-icon name="eye-outline"></ion-icon></button>
                }
                else
                {
                    <button class="btn btn-outline-primary border-0" @onclick=_state.HideAsync><ion-icon name="sync"></ion-icon></button>
                }

                @for (int i = 0; i < _state.Others.Count(); i++)
                {
                    <div class="stat" style="--i:@(i + 1)">
                        <label>@_state.Others.ElementAt(i).Name</label>

                        <div class="point shadow @(string.IsNullOrWhiteSpace(_state.Others.ElementAt(i).Points) ? "bg-primary-subtle" : "bg-primary") text-white">
                            @if (_state.Session.State != State.Hidden && !string.IsNullOrWhiteSpace(_state.Others.ElementAt(i).Points))
                            {
                                <span>@_state.Others.ElementAt(i).Points</span>
                            }
                        </div>
                    </div>
                }
                
                @if (_state.Self is not null)
                {
                    <div class="stat" style="--i:@(_state.Session.Participants.Count())">
                        <label>@_state.Self.Name</label>

                        <div class="point shadow @(string.IsNullOrWhiteSpace(_state.Self.Points) ? "bg-primary-subtle" : "bg-primary") text-white">
                            @if (_state.Session.State != State.Hidden && !string.IsNullOrWhiteSpace(_state.Self.Points))
                            {
                                <span>@_state.Self.Points</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="card m-3 w-auto shadow-sm border-0" style="grid-area: footer; max-width: 600px;">
            <div class="card-body p-2">
                <div class="d-flex gap-2 justify-content-between">
                    @foreach (var option in _state.Options)
                    {
                        <button class="btn btn-square @(_state.Self?.Points == option ? "btn-primary" : "btn-outline-primary")" @onclick="@(async () => await _state.UpdatePointsAsync(option))">@option</button>
                    }
                    <button class="btn btn-square btn-outline-danger" @onclick="@(async () => await _state.UpdatePointsAsync(""))"><ion-icon name="close-outline"></ion-icon></button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid SessionId { get; set; }

    string Title { get; set; } = string.Empty;

    string Name { get; set; } = string.Empty;

    bool IsEditingTitle { get; set; }

    bool IsEditingName { get; set; }

    bool IsContentBlurred =>
        _state.Self is null
        || IsEditingTitle
        || IsEditingName;

    protected override async Task OnInitializedAsync()
    {
        _state.OnStateChanged += (o, e) => StateHasChanged();
        await _state.LoadAsync(SessionId);
    }

    void OnEditTitleClicked()
    {
        Title = _state.Session.Title;
        IsEditingTitle = true;
        StateHasChanged();
    }

    void OnEditNameClicked()
    {
        Name = _state.Self!.Name;
        IsEditingName = true;
        StateHasChanged();
    }

    void OnCloseEditTitleModalClicked()
    {
        IsEditingTitle = false;
    }

    void OnCloseEditNameModalClicked()
    {
        IsEditingName = false;
    }

    async Task OnSaveTitleClicked()
    {
        await _state.UpdateTitleAsync(Title);
        IsEditingTitle = false;
        StateHasChanged();
    }

    async Task OnSaveNameClicked()
    {
        await _state.UpdateNameAsync(Name);
        IsEditingName = false;
        StateHasChanged();
    }
}
