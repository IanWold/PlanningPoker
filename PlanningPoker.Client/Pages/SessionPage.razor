@page "/session/{SessionId}"
@inject SessionState _state
@inject NavigationManager _navigationManager

@using System

<PageTitle>@(_state.Session?.Title ?? "Session")</PageTitle>

@if (_state.Session is null) {
    <div class="spinner-border" style="position: absolute; left: 50%; top: 50%; margin-top:-3rem; margin-left: -3rem; width: 6rem; height: 6rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else {
    <ToastComponent />
    <JoinFormComponent />

    @if (IsEditingTitle) {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <form class="d-flex gap-2 w-100" @onsubmit=OnSaveTitleClicked>
                    <input type="text" class="form-control" placeholder="Enter a title for the session" required pattern="(.|\s)*\S(.|\s)*" @bind-value=Title>
                    <button class="btn border-0 btn-outline-success" type="submit" disabled="@(IsLoading)"><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" disabled="@(IsLoading)" @onclick=OnCloseEditTitleModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </form>

                @if (!string.IsNullOrEmpty(ErrorMessage)) {
                    <div class="alert alert-danger mb-0 mt-3">
                        <ion-icon name="alert-circle-sharp" style="margin-bottom: -8px; font-size: 20pt;"></ion-icon> @ErrorMessage
                    </div>
                }
            </div> </div> </div> </div>
        </div>
    }

    @if (IsEditingName) {
        <div class="overlay">
            <div class="modal modal-md d-block"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-body">
                <form class="d-flex gap-2 w-100" @onsubmit=OnSaveNameClicked>
                    <input type="text" class="form-control" placeholder="Enter your name" required pattern="(.|\s)*\S(.|\s)*" @bind-value=Name>
                    <button class="btn border-0 btn-outline-success" type="submit" disabled="@(IsLoading)"><ion-icon name="checkmark-sharp"></ion-icon></button>
                    <button class="btn border-0 btn-outline-secondary" disabled="@(IsLoading)" @onclick=OnCloseEditNameModalClicked><ion-icon name="close-sharp"></ion-icon></button>
                </form>

                @if (!string.IsNullOrEmpty(ErrorMessage)) {
                    <div class="alert alert-danger mb-0 mt-3">
                        <ion-icon name="alert-circle-sharp" style="margin-bottom: -8px; font-size: 20pt;"></ion-icon> @ErrorMessage
                    </div>
                }
            </div> </div> </div> </div>
        </div>
    }

    <ShareNotificationComponent />

    <div class="session" style="@(IsContentBlurred ? "filter: blur(1px)" : "")">
        <div class="card m-3 shadow-sm border-0" style="grid-area: header; width: 600px;">
            <div class="card-body p-2">
                <div class="d-flex gap-2 w-100 justify-content-between">
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon fw-bold" disabled="@(IsLoading)" @onclick=OnEditTitleClicked>@_state.Session.Title <ion-icon name="settings-sharp"></ion-icon></button>
                    <button type="button" class="btn btn-outline-light border-0 text-dark hidden-icon" disabled="@(IsLoading)" @onclick=OnEditNameClicked><ion-icon name="person-sharp"></ion-icon> @_state.Self?.Name</button>
                </div>
            </div>
        </div>
        
        <AddComponent />
        <ToggleColorModeComponent />


        <div style="grid-area: main">
            <CenterTableComponent />
        </div>

        <div class="m-3 d-flex" style="position: absolute; bottom: 0; left: 0;">
            <ToastHistoryComponent />
        </div>

        <div style="grid-area: footer;">
            <PointSelectionComponent />
        </div>

        <div class="m-3 d-flex" style="position: absolute; bottom: 0; right: 0;">
            <CoffeeComponent />
            <HelpComponent />
        </div>
    </div>
}

@code {
    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    string Title { get; set; } = string.Empty;

    string Name { get; set; } = string.Empty;

    string? ErrorMessage { get; set; }

    bool IsEditingTitle { get; set; }

    bool IsEditingName { get; set; }

    bool IsLoading { get; set; }

    bool IsContentBlurred =>
        _state.Self is null
        || IsEditingTitle
        || IsEditingName;

    protected override async Task OnInitializedAsync() {
        _state.OnStateChanged += (o, e) => StateHasChanged();
        await _state.LoadAsync(SessionId);
    }

    void OnEditTitleClicked() {
        ErrorMessage = null;
        Title = _state!.Session!.Title;
        IsEditingTitle = true;
        StateHasChanged();
    }

    void OnEditNameClicked() {
        ErrorMessage = null;
        Name = _state.Self!.Name;
        IsEditingName = true;
        StateHasChanged();
    }

    void OnCloseEditTitleModalClicked() {
        ErrorMessage = null;
        IsEditingTitle = false;
    }

    void OnCloseEditNameModalClicked() {
        ErrorMessage = null;
        IsEditingName = false;
    }

    async Task OnSaveTitleClicked() {
        if (!string.IsNullOrWhiteSpace(Title)) {
            ErrorMessage = null;
            IsLoading = true;
            StateHasChanged();

            try {
                await _state.UpdateTitleAsync(Title);
            }
            catch {
                ErrorMessage = "An error occurred while updating the title. Please try again.";
            }

            IsEditingTitle = false;
            IsLoading = false;
            StateHasChanged();
        }
    }

    async Task OnSaveNameClicked() {
        if (!string.IsNullOrWhiteSpace(Name)) {
            ErrorMessage = null;
            IsLoading = true;
            StateHasChanged();

            try {
                await _state.UpdateNameAsync(Name);
            }
            catch {
                ErrorMessage = "An error occurred while updating your name. Please try again.";
            }

            IsEditingName = false;
            IsLoading = false;
            StateHasChanged();
        }
    }
}
